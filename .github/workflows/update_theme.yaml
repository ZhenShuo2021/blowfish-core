name: Sync Theme Release

env:
  REPO_NAME: ${{ github.repository }}
  SOURCE_REPO: nunocoracao/blowfish
  SOURCE_REPO_NAME: blowfish
  SOURCE_REPO_AUTHOR: github-actions[bot]
  SOURCE_REPO_AUTHOR_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com
  DEPLOY_PROJECT_NAME: blowfish-core  # Cloudflare project name (pages)
  DEFAULT_HUGO_VERSION: 0.147.1

on:
  schedule:
    - cron: '0 */8 * * *'
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      SHOULD_CONTINUE: ${{ steps.determine_run.outputs.SHOULD_CONTINUE }}
      LATEST_RELEASE: ${{ steps.determine_run.outputs.LATEST_RELEASE }}
      BRANCH_NAME: ${{ steps.create_branch_name.outputs.BRANCH_NAME }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine whether to run
        id: determine_run
        run: |
          message="${{ github.event.head_commit.message }}"

          if echo "$message" | grep -iq "merge pull request"; then
            echo "SHOULD_CONTINUE=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          latest_release=$(curl -s https://api.github.com/repos/${SOURCE_REPO}/releases/latest | jq -r .tag_name)
          current_release=$(cat .github/.theme_version 2>/dev/null || echo none)
          echo "CURRENT_RELEASE=$current_release"
          echo "LATEST_RELEASE=$latest_release" >> $GITHUB_OUTPUT

          if [ "$latest_release" == "$current_release" ]; then
            echo "SHOULD_CONTINUE=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "SHOULD_CONTINUE=true" >> $GITHUB_OUTPUT

      - name: Create branch name
        id: create_branch_name
        if: steps.determine_run.outputs.SHOULD_CONTINUE == 'true'
        run: |
          branch_name="theme-update-$(echo ${{ steps.determine_run.outputs.LATEST_RELEASE }} | sed 's/[^a-zA-Z0-9]/-/g')"
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_OUTPUT

  sync-release:
    if: needs.check-version.outputs.SHOULD_CONTINUE == 'true'
    needs: check-version
    runs-on: ubuntu-latest
    env:
      PR_TITLE: "Sync with Blowfish ${{ needs.check-version.outputs.LATEST_RELEASE }}"
    outputs:
      PR_NUMBER: ${{ steps.create_pr.outputs.pull-request-number }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for existing PR
        id: check_pr
        run: |
          existing_pr=$(gh pr list --state open --search "\"$PR_TITLE\"" --json number,title | jq -r '.[0].number // empty')

          if [[ -n "$existing_pr" ]]; then
            echo "EXISTING_PR_FOUND=true" >> $GITHUB_OUTPUT
            echo "EXISTING_PR_NUMBER=$existing_pr" >> $GITHUB_OUTPUT
            echo "Found existing PR #$existing_pr with same title: $PR_TITLE"
          else
            echo "EXISTING_PR_FOUND=false" >> $GITHUB_OUTPUT
            echo "No existing PR found with title: $PR_TITLE"
          fi
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Skip if PR exists
        if: steps.check_pr.outputs.EXISTING_PR_FOUND == 'true'
        run: |
          echo "Skipping sync process - PR #${{ steps.check_pr.outputs.EXISTING_PR_NUMBER }} already exists"
          echo "PR URL: ${{ github.server_url }}/${{ github.repository }}/pull/${{ steps.check_pr.outputs.EXISTING_PR_NUMBER }}"
          exit 0

      - name: Run update script
        if: steps.check_pr.outputs.EXISTING_PR_FOUND == 'false'
        id: run_update_script
        run: |
          if .github/update.sh; then
            echo "UPDATE_SUCCESS=true" >> $GITHUB_OUTPUT
          else
            echo "UPDATE_SUCCESS=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Commit changes
        if: steps.check_pr.outputs.EXISTING_PR_FOUND == 'false' && steps.run_update_script.outputs.UPDATE_SUCCESS == 'true'
        run: |
          git config user.name "${SOURCE_REPO_AUTHOR}"
          git config user.email "${SOURCE_REPO_AUTHOR_EMAIL}"
          branch_name="${{ needs.check-version.outputs.BRANCH_NAME }}"
          if git ls-remote --heads origin "$branch_name" | grep -q "$branch_name"; then
            git push origin --delete "$branch_name"
          fi

          git add .
          git commit -m "‚¨ÜÔ∏è Sync Blowfish release ${{ needs.check-version.outputs.LATEST_RELEASE }}"

          echo "${{ needs.check-version.outputs.LATEST_RELEASE }}" > .github/.theme_version
          git add .github/.theme_version
          git commit -m "‚¨ÜÔ∏è Update .theme_version to ${{ needs.check-version.outputs.LATEST_RELEASE }}"

      - name: Create Pull Request
        if: steps.check_pr.outputs.EXISTING_PR_FOUND == 'false' && steps.run_update_script.outputs.UPDATE_SUCCESS == 'true'
        id: create_pr
        uses: peter-evans/create-pull-request@v7
        with:
          title: ${{ env.PR_TITLE }}
          author: "${SOURCE_REPO_AUTHOR} <${SOURCE_REPO_AUTHOR_EMAIL}>"
          body: |
            This PR synchronizes the theme with Blowfish release ${{ needs.check-version.outputs.LATEST_RELEASE }}.

            A Cloudflare preview deployment will be available for review.

            Please verify the changes before merging.
          base: main
          branch: ${{ needs.check-version.outputs.BRANCH_NAME }}
          labels: theme-update

  deploy-preview:
    needs: [check-version, sync-release]
    if: needs.sync-release.outputs.PR_NUMBER != ''
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
      pull-requests: write
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-version.outputs.BRANCH_NAME }}

      - name: Read Hugo version
        id: hugo-version
        run: |
          if [ -f "release-versions/hugo-latest.txt" ]; then
            HUGO_VERSION=$(cat release-versions/hugo-latest.txt | sed 's/^v//')
          else
            HUGO_VERSION="${DEFAULT_HUGO_VERSION}"
          fi
          echo "HUGO_VERSION=${HUGO_VERSION}" >> $GITHUB_OUTPUT

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: ${{ steps.hugo-version.outputs.HUGO_VERSION }}
          extended: true

      - name: Get diff between tags from SOURCE_REPO and compare with PR changes
        id: tag-diff
        run: |
          # Get source repo changes between versions
          git clone --filter=blob:none --no-checkout --sparse https://github.com/${SOURCE_REPO}.git __source-repo
          cd __source-repo

          all_tags=$(git tag -l --sort=-version:refname)
          latest_tag="${{ needs.check-version.outputs.LATEST_RELEASE }}"
          previous_tag=""
          found_latest=false
          for tag in $all_tags; do
            if [ "$tag" = "$latest_tag" ]; then
              found_latest=true
            elif [ "$found_latest" = true ]; then
              previous_tag="$tag"
              break
            fi
          done

          if [ -z "$previous_tag" ]; then
            echo "No previous tag found. Skipping diff."
            echo "DIFF_CONTENT=" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get changed files in source repo and PR
          git diff --name-only "$previous_tag" "$latest_tag" -- ':!exampleSite' ':!exampleSite/*' > ../source_changes.txt
          cd ..
          gh pr diff ${{ needs.sync-release.outputs.PR_NUMBER }} --name-only > core_pr_changes.txt

          # Calculate counts
          source_count=$(wc -l < source_changes.txt 2>/dev/null || echo 0)
          core_count=$(wc -l < core_pr_changes.txt 2>/dev/null || echo 0)
          missing_updates=$(comm -23 <(sort source_changes.txt) <(sort core_pr_changes.txt))
          missing_count=$(echo "$missing_updates" | grep -c '^' 2>/dev/null || echo 0)

          # Build report
          echo "## üìä Update Summary" > diff.md
          echo "**Version:** $previous_tag ‚Üí $latest_tag" >> diff.md
          echo "" >> diff.md
          echo "- **Source changes:** $source_count files" >> diff.md
          echo "- **PR updates:** $core_count files" >> diff.md
          echo "- **Missing files:** $missing_count files" >> diff.md
          echo "" >> diff.md

          if [ "$missing_count" -gt 0 ]; then
            echo "## ‚ö†Ô∏è Missing Files" >> diff.md
            echo "$missing_updates" | while read file; do
              [ -n "$file" ] && echo "- \`$file\`" >> diff.md
            done
            echo "" >> diff.md
          fi

          echo "## üìù Source Repository Changes" >> diff.md
          while read file; do
            [ -n "$file" ] && echo "- \`$file\`" >> diff.md
          done < source_changes.txt
          echo "" >> diff.md

          echo "<details>" >> diff.md
          echo "<summary>üîß Core Repository PR Changes ($core_count files)</summary>" >> diff.md
          echo "" >> diff.md
          while read file; do
            [ -n "$file" ] && echo "- \`$file\`" >> diff.md
          done < core_pr_changes.txt
          echo "" >> diff.md
          echo "</details>" >> diff.md

          DIFF_CONTENT=$(cat diff.md)
          echo "DIFF_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Build site for preview
        timeout-minutes: 3
        run: |
          # Get our repo name
          IFS='/' read -r _ repo_dir <<< "${REPO_NAME}"

          # Clone the exampleSite and assets
          git clone --sparse --filter=blob:none --no-checkout --depth=1 https://github.com/${SOURCE_REPO}.git theme
          cd theme
          git sparse-checkout set exampleSite assets static
          git checkout
          cp -r exampleSite ../
          cp -r assets ../
          cp -r static ../
          cd ..

          # Move the whole 'repo_dir' directory to theme directory temporarily
          # Hugo requires the themesDir to have the same name as the config file
          cd ..
          mv "$repo_dir" "${SOURCE_REPO_NAME}"

          # Work inside the theme directory
          cd "${SOURCE_REPO_NAME}"
          hugo -E -F --minify --source exampleSite --themesDir ../.. --buildDrafts -b "https://preview-${{ needs.check-version.outputs.BRANCH_NAME }}.pages.dev/"

          # Rename 'theme_name' back to 'repo_dir'
          cd .. && mv ${SOURCE_REPO_NAME} "$repo_dir" && cd "$repo_dir"

      - name: Deploy to Cloudflare Pages
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy exampleSite/public --project-name=${{ env.DEPLOY_PROJECT_NAME }} --commit-dirty=true --branch=${{ needs.check-version.outputs.BRANCH_NAME }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR with Preview URL and Diff
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.deployment-url }}';
            const branchAliasUrl = '${{ steps.deploy.outputs.pages-deployment-alias-url }}';
            const previewUrl = deploymentUrl || branchAliasUrl;
            const diffContent = `${{ steps.tag-diff.outputs.DIFF_CONTENT }}`;

            github.rest.issues.createComment({
              issue_number: ${{ needs.sync-release.outputs.PR_NUMBER }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üìã **Preview deployment available at:** [${previewUrl}](${previewUrl})\n\nPlease review the changes before merging the PR.\n\n${diffContent}`
            });

  create-new-tag:
    needs: deploy-preview
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest release info
        id: fetch_release
        run: |
          VERSION=$(gh release view --repo ${SOURCE_REPO} --json tagName -q '.tagName')
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create a new tag
        run: |
          git config user.name "${SOURCE_REPO_AUTHOR}"
          git config user.email "${SOURCE_REPO_AUTHOR_EMAIL}"
          git tag -a "${{ steps.fetch_release.outputs.VERSION }}" -m "Release ${{ steps.fetch_release.outputs.VERSION }}"
          git push origin "${{ steps.fetch_release.outputs.VERSION }}"
